# Generated by Django 4.1.7 on 2023-03-19 23:43

import API.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AdImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.CharField(default="", max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name="Advertisement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ad_type",
                    models.CharField(
                        choices=[("Store", "store"), ("Product", "product")],
                        default="Store",
                        max_length=100,
                    ),
                ),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CartProduct",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=100)),
                ("image_url", models.CharField(default="", max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("shop_name", models.CharField(default="", max_length=100)),
                ("full_name", models.CharField(default="", max_length=100)),
                ("image_url", models.CharField(default="", max_length=1000)),
                ("phone_number", models.CharField(default="", max_length=20)),
                ("password", models.CharField(default="", max_length=100)),
                ("e_mail", models.CharField(default="", max_length=100)),
                ("wilaya", models.CharField(default="", max_length=100)),
                ("commune", models.CharField(default="", max_length=100)),
                ("address", models.CharField(default="", max_length=100)),
                ("created_at", models.IntegerField(default=API.models.get_now_stamp)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Coupon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("string", models.CharField(max_length=100)),
                ("discount", models.IntegerField(default=1)),
                (
                    "coupon_type",
                    models.CharField(
                        choices=[
                            ("Product", "Product"),
                            ("Category", "Category"),
                            ("All", "All"),
                        ],
                        default="All",
                        max_length=100,
                    ),
                ),
                ("target_id", models.IntegerField(blank=True, default=None, null=True)),
                ("max_nbr_uses", models.IntegerField(default=1)),
                ("created_at", models.IntegerField(default=API.models.get_now_stamp)),
                ("is_active", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="CouponCount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("count", models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=100)),
                ("created_at", models.IntegerField(default=API.models.get_now_stamp)),
            ],
        ),
        migrations.CreateModel(
            name="GroupClients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("Created", "Created"),
                            ("Updated", "Updated"),
                            ("Deleted", "Deleted"),
                            ("Accepted", "Accepted"),
                            ("Refused", "Refused"),
                            ("Canceled", "Canceled"),
                            ("Submited", "Submited"),
                            ("Sent", "Sent"),
                            ("Completed", "Completed"),
                            ("Started Shipping", "Started Shipping"),
                            ("Delivered", "Delivered"),
                        ],
                        default="Created",
                        max_length=100,
                    ),
                ),
                ("message", models.TextField(default="")),
                ("seen", models.BooleanField(default=False)),
                ("created_at", models.IntegerField(default=API.models.get_now_stamp)),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.IntegerField(default=API.models.get_now_stamp)),
                ("total_price", models.FloatField(default=1.0)),
                ("archived_by_store", models.BooleanField(default=False)),
                ("archived_by_client", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="OrderCoupon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrderProduct",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.IntegerField(default=1)),
                ("discount", models.IntegerField(default=0)),
                ("original_price", models.FloatField()),
                ("new_price", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="OrderState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("Created", "Created"),
                            ("Updated", "Updated"),
                            ("Deleted", "Deleted"),
                            ("Accepted", "Accepted"),
                            ("Refused", "Refused"),
                            ("Canceled", "Canceled"),
                            ("Submited", "Submited"),
                            ("Sent", "Sent"),
                            ("Completed", "Completed"),
                            ("Started Shipping", "Started Shipping"),
                            ("Delivered", "Delivered"),
                        ],
                        default="Created",
                        max_length=100,
                    ),
                ),
                ("description", models.TextField(default="")),
                ("time_stamp", models.IntegerField(default=API.models.get_now_stamp)),
            ],
        ),
        migrations.CreateModel(
            name="PackType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Store",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("store_name", models.CharField(default="", max_length=100)),
                ("full_name", models.CharField(default="", max_length=100)),
                ("image_url", models.CharField(default="", max_length=1000)),
                ("phone_number", models.CharField(default="", max_length=20)),
                ("password", models.CharField(default="", max_length=100)),
                ("e_mail", models.CharField(default="", max_length=100)),
                ("wilaya", models.CharField(default="", max_length=100)),
                ("commune", models.CharField(default="", max_length=100)),
                ("address", models.CharField(default="", max_length=100)),
                ("created_at", models.IntegerField(default=API.models.get_now_stamp)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("fav_clients", models.ManyToManyField(to="API.client")),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=100)),
                ("brand", models.CharField(default="", max_length=100)),
                ("price", models.FloatField()),
                ("image_url", models.CharField(default="", max_length=100)),
                ("description", models.TextField(default="")),
                ("nbr_units", models.IntegerField(default=1)),
                ("discount", models.IntegerField(default=0)),
                ("is_available", models.BooleanField(default=True)),
                ("created_at", models.IntegerField(default=API.models.get_now_stamp)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="products",
                        related_query_name="product",
                        to="API.category",
                    ),
                ),
                (
                    "pack_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="products",
                        related_query_name="product",
                        to="API.packtype",
                    ),
                ),
                (
                    "store",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        related_query_name="product",
                        to="API.store",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="packtype",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_pack_type_name"
            ),
        ),
        migrations.AddField(
            model_name="orderstate",
            name="order",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orderstates",
                related_query_name="orderstate",
                to="API.order",
            ),
        ),
        migrations.AddField(
            model_name="orderproduct",
            name="order",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orderitems",
                related_query_name="orderitem",
                to="API.order",
            ),
        ),
        migrations.AddField(
            model_name="orderproduct",
            name="product",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="orderitems",
                related_query_name="orderitem",
                to="API.product",
            ),
        ),
        migrations.AddField(
            model_name="ordercoupon",
            name="coupon",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ordercoupons",
                related_query_name="ordercoupon",
                to="API.coupon",
            ),
        ),
        migrations.AddField(
            model_name="ordercoupon",
            name="order",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ordercoupons",
                related_query_name="ordercoupon",
                to="API.order",
            ),
        ),
        migrations.AddField(
            model_name="order",
            name="client",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="orders",
                related_query_name="order",
                to="API.client",
            ),
        ),
        migrations.AddField(
            model_name="order",
            name="store",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="orders",
                related_query_name="order",
                to="API.store",
            ),
        ),
        migrations.AddField(
            model_name="notification",
            name="client",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notifications",
                related_query_name="notification",
                to="API.client",
            ),
        ),
        migrations.AddField(
            model_name="notification",
            name="store",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notifications",
                related_query_name="notification",
                to="API.store",
            ),
        ),
        migrations.AddField(
            model_name="groupclients",
            name="client",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clientgroups",
                related_query_name="clientgroup",
                to="API.client",
            ),
        ),
        migrations.AddField(
            model_name="groupclients",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="groupclients",
                related_query_name="groupclient",
                to="API.group",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="clients",
            field=models.ManyToManyField(
                related_name="groups",
                related_query_name="group",
                through="API.GroupClients",
                to="API.client",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="store",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="groups",
                related_query_name="group",
                to="API.store",
            ),
        ),
        migrations.AddField(
            model_name="couponcount",
            name="client",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="couponcounts",
                related_query_name="couponcount",
                to="API.client",
            ),
        ),
        migrations.AddField(
            model_name="couponcount",
            name="coupon",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="couponcounts",
                related_query_name="couponcount",
                to="API.coupon",
            ),
        ),
        migrations.AddField(
            model_name="coupon",
            name="store",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="coupons",
                related_query_name="coupon",
                to="API.store",
            ),
        ),
        migrations.AddField(
            model_name="client",
            name="fav_stores",
            field=models.ManyToManyField(to="API.store"),
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_category_name"
            ),
        ),
        migrations.AddField(
            model_name="cartproduct",
            name="cart",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cartitems",
                related_query_name="cartitem",
                to="API.cart",
            ),
        ),
        migrations.AddField(
            model_name="cartproduct",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cartitems",
                related_query_name="cartitem",
                to="API.product",
            ),
        ),
        migrations.AddField(
            model_name="cart",
            name="client",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cart",
                related_query_name="cart",
                to="API.client",
            ),
        ),
        migrations.AddField(
            model_name="cart",
            name="items",
            field=models.ManyToManyField(to="API.product"),
        ),
        migrations.AddField(
            model_name="advertisement",
            name="product",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ads",
                related_query_name="ad",
                to="API.product",
            ),
        ),
        migrations.AddField(
            model_name="advertisement",
            name="store",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ads",
                related_query_name="ad",
                to="API.store",
            ),
        ),
        migrations.AddField(
            model_name="adimage",
            name="ad",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="images",
                related_query_name="image",
                to="API.advertisement",
            ),
        ),
        migrations.AddConstraint(
            model_name="store",
            constraint=models.UniqueConstraint(
                fields=("store_name",), name="unique_store_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="store",
            constraint=models.UniqueConstraint(
                fields=("phone_number",), name="unique_store_phone_numbre"
            ),
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.UniqueConstraint(
                fields=("name", "store_id"), name="unique_product_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.CheckConstraint(
                check=models.Q(("price__gte", 1)), name="positive_price"
            ),
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.CheckConstraint(
                check=models.Q(("nbr_units__gte", 1)), name="positive_nbr_units"
            ),
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.CheckConstraint(
                check=models.Q(("discount__gte", 0), ("discount__lte", 100)),
                name="correct_product_discount",
            ),
        ),
        migrations.AddConstraint(
            model_name="orderproduct",
            constraint=models.CheckConstraint(
                check=models.Q(("quantity__gte", 1)), name="item_positive_quantity"
            ),
        ),
        migrations.AddConstraint(
            model_name="orderproduct",
            constraint=models.CheckConstraint(
                check=models.Q(("original_price__gte", 1)),
                name="item_positive_original_price",
            ),
        ),
        migrations.AddConstraint(
            model_name="orderproduct",
            constraint=models.CheckConstraint(
                check=models.Q(("new_price__gte", 0)), name="item_positive_new_price"
            ),
        ),
        migrations.AddConstraint(
            model_name="orderproduct",
            constraint=models.CheckConstraint(
                check=models.Q(("discount__gte", 0), ("discount__lt", 100)),
                name="item_correct_discount",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                check=models.Q(("total_price__gte", 1)),
                name="order_positive_total_price",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("client_id__isnull", False),
                    ("store_id__isnull", False),
                    _connector="OR",
                ),
                name="valide_order",
            ),
        ),
        migrations.AddConstraint(
            model_name="notification",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("client_id__isnull", True),
                    ("store_id__isnull", True),
                    _connector="XOR",
                ),
                name="valide_notification",
                violation_error_message="both client and store are/aren't null",
            ),
        ),
        migrations.AddConstraint(
            model_name="groupclients",
            constraint=models.UniqueConstraint(
                fields=("group_id", "client_id"), name="unique_group_client"
            ),
        ),
        migrations.AddConstraint(
            model_name="group",
            constraint=models.UniqueConstraint(
                fields=("name", "store_id"), name="unique_group_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="couponcount",
            constraint=models.UniqueConstraint(
                fields=("client_id", "coupon_id"), name="unique_client_coupon"
            ),
        ),
        migrations.AddConstraint(
            model_name="couponcount",
            constraint=models.CheckConstraint(
                check=models.Q(("count__gte", 1)), name="coupon_count_positive_count"
            ),
        ),
        migrations.AddConstraint(
            model_name="coupon",
            constraint=models.UniqueConstraint(
                fields=("string", "store_id"), name="unique_coupon"
            ),
        ),
        migrations.AddConstraint(
            model_name="coupon",
            constraint=models.CheckConstraint(
                check=models.Q(("max_nbr_uses__gte", 1)), name="positive_max_nbr_uses"
            ),
        ),
        migrations.AddConstraint(
            model_name="coupon",
            constraint=models.CheckConstraint(
                check=models.Q(("discount__gte", 1), ("discount__lte", 100)),
                name="correct_coupon_discount",
            ),
        ),
        migrations.AddConstraint(
            model_name="client",
            constraint=models.UniqueConstraint(
                fields=("shop_name",), name="unique_shop_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="client",
            constraint=models.UniqueConstraint(
                fields=("phone_number",), name="unique_shop_phone_numbre"
            ),
        ),
        migrations.AddConstraint(
            model_name="cartproduct",
            constraint=models.CheckConstraint(
                check=models.Q(("quantity__gte", 1)), name="cart_positive_quantity"
            ),
        ),
    ]
