
to create an order:
  0) verification:
      - send GET request to verify that all the coupons included in the order do exist in the DB, 
        and are active ("is_active"),
        and their discounts are correct.
      - send GET request to "get_couponclient" to verify that the count is <= max_nbr_uses of the coupon
      - send GET request to verify that all the products in the order do exist in the DB,
        and are available ("is_available"),
        and their prices are correct.
      - calculate the prices of the products, and total_price of the order

  1) create an Order with: "store_id", "client_id", "total_price"
  2) make a loop to create order coupons one by one: 
    {"coupon_id", "order_id"}

  3) make a loop to create order products one by one:
    {"product_id", "order_id", "quantity", "discount", "original_price", "new_price"}
    
    (you use a loop because you can only create one item per request)

  4) send a "POST" request to "update_order_state/{order_id}/", 
    - and set "state" to "Created"
    - and "updated_by_store" to false (because only the clients who creat the orders)
    - if you don't do this the current_state of the order will remain null, 
      and the store won't recieve a notification.


notes:
  - make sure to execute those steps consecutively as fas as possible, 
        so that no sudden changes occurs.

	- when a client updates an order or one of its products or coupons, the store won't get a notification 
			that says "order(x) is updated", you must explicitly update the order state by 
						sending a "POST" request to "update_order_state/<int:order_id>/"

	- to update an order state, send a "POST" request to "update_order_state/<int:order_id>/"
		with json body like this:
			{
				"state": "submitted"
				"description": "i need this order ASAP!!"
				"updated_by_store": false
			}
		or:
			{
				"state": "refused"
				"description": "this order is too looooong"
				"updated_by_store": true
			}
		what happens is a new OrderState will be created with these fields, 
		and it will be marked as the current_state in the order.

		"updated_by_store" is used to determin who updated the state of this order (the store or the client)
		this is important because right after we create a new OrderState and mark it as the current_state
		we create a notification and: 
			if updated_by_store==true:
				sends notification to the client
			else:
				sends notification to the store

		- don't use "create_orderstate" because:
			- the new state won't be marked as the current state of the order
			- no notification will be created or sent to the other person

    - to update the description of the state of the order:
        use "update_orderstate" and not "update_order_state/<int:order_id>/",
        because "update_order_state" always creates a new state and doesn't modify old ones


